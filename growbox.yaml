esphome:
  name: growbox

esp32:
  board: nodemcu-32s

# Enable logging
logger:
  level: ERROR

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# captive_portal:

web_server:
  port: 80

# esp32_ble_tracker:

# bluetooth_proxy:

substitutions:
  friendly_name: "Growbox"

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
    update_interval: 10s
    id: growbox_uptime
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "${friendly_name} Soil Moisture"
    update_interval: 60s
    id: soil_moisture
    unit_of_measurement: "%"
    filters:
    - calibrate_linear:
        method: least_squares
        datapoints:
        - 1.0 -> 100
        - 3.32 -> 0
    - sliding_window_moving_average:
        window_size: 15
        send_every: 15
  # - platform: ads1115
  #   multiplexer: 'A0_GND'
  #   gain: 6.144
  #   name: "${friendly_name} Soil Moisture Raw"
  #   update_interval: 60s
  #   id: soil_moisture_raw
  #   unit_of_measurement: "v"
  - platform: aht10
    i2c_id: i2cfast
    update_interval: 1s
    temperature:
      name: "${friendly_name} dht20 Temperature"
      id: temperature
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
    humidity:
      name: "${friendly_name} dht20 Humidity"
      id: humidity
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
      on_value_range:
        - above: 70
          then:
          - climate.control:
              id: template_climate
              mode: DRY
        - below: 70
          then:
          - climate.control:
              id: template_climate
              mode: AUTO
  - platform: pid
    name: "${friendly_name} Climate PID Result"
    type: RESULT
    internal: True
    climate_id: pid_climate_fan_cool
    id: pid_result
  - platform: pid
    name: "${friendly_name} Climate Fan Speed"
    type: COOL
    climate_id: pid_climate_fan_cool
    id: pid_cool
  - platform: pid
    name: "${friendly_name} Climate Humidity PID Result"
    type: RESULT
    internal: True
    climate_id: pid_climate_fan_cool_fan_dry
    id: pid_result_humidity
  - platform: pid
    name: "${friendly_name} Climate Fan Speed Humidity"
    type: COOL
    climate_id: pid_climate_fan_cool_fan_dry
    id: pid_cool_humidity
  - platform: template
    name: "${friendly_name} Fan Speed"
    id: fan_speed
    unit_of_measurement: "%"
  - platform: template
    name: "${friendly_name} Dew Point"
    id: dew_point
    lambda: |-
      if (!id(temperature).has_state() || !id(humidity).has_state()) {
        return NAN;
      }
      float dew_point_constant_a = 17.27;
      float dew_point_constant_b = 237.7;
      float alpha = ((dew_point_constant_a * id(temperature).state) / (dew_point_constant_b + id(temperature).state)) + log(id(humidity).state / 100.0);
      float dew_point = (dew_point_constant_b * alpha) / (dew_point_constant_a - alpha);
      return dew_point;
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    update_interval: 10s
  - platform: template
    name: "${friendly_name} VPD"
    id: vpd_sensor
    lambda: |-
          if (!id(temperature).has_state() || !id(humidity).has_state()) {
            return NAN;
          }
          float tempValue = id(temperature).state;
          float humidityValue = id(humidity).state;
          // Calculate SVP
          float svp = 610.78 * exp(tempValue / (tempValue + 237.3) * 17.2694);
          // Convert SVP to kPa
          svp = svp / 1000.0;
          // Calculate VPD
          float vpd = svp * (1.0 - (humidityValue / 100.0));
          return vpd;
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
    update_interval: 10s
  - platform: template
    name: "${friendly_name} VPD Target"
    id: vpd_target_sensor
    lambda: |-
          float tempValue = id(template_climate).target_temperature;
          float humidityValue = id(climate_humidity).target_temperature;
          // Calculate SVP
          float svp = 610.78 * exp(tempValue / (tempValue + 237.3) * 17.2694);
          // Convert SVP to kPa
          svp = svp / 1000.0;
          // Calculate VPD
          float vpd = svp * (1.0 - (humidityValue / 100.0));
          return vpd;
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
    update_interval: 1s
climate:
  - platform: thermostat
    id: template_climate
    internal: false
    name: "${friendly_name} Climate"
    sensor: temperature
    min_cooling_off_time: 300s
    min_cooling_run_time: 300s
    min_idle_time: 30s
    visual:
      min_temperature: 23
      max_temperature: 30
    cool_action:
      - climate.control:
          id: pid_climate_fan_cool_fan_dry
          mode: "OFF"
      - climate.control:
          id: climate_humidity
          mode: "HEAT"
      - climate.control:
          id: pid_climate_fan_cool
          mode: "COOL"
    idle_action:
      - climate.control:
          id: pid_climate_fan_cool_fan_dry
          mode: "OFF"
      - climate.control:
          id: climate_humidity
          mode: "HEAT"
      - climate.control:
          id: pid_climate_fan_cool
          mode: "COOL"
    dry_action:
      - climate.control:
          id: pid_climate_fan_cool
          mode: "OFF"
      - climate.control:
          id: climate_humidity
          mode: "OFF"
      - climate.control:
          id: pid_climate_fan_cool_fan_dry
          mode: "COOL"
          target_temperature: 60
    default_preset: Home
    on_boot_restore_from: memory
    preset:
      - name: Home
        mode: COOL
        default_target_temperature_high: 24.5°C
    on_control:
      - lambda: |-
          auto call = id(pid_climate_fan_cool).make_call();
          call.set_target_temperature(x.get_target_temperature());
          call.perform();
  - platform: pid
    internal: false
    id: pid_climate_fan_cool_fan_dry
    name: "${friendly_name} Climate Humidity PID Controller"
    sensor: humidity
    default_target_temperature: 50
    cool_output: template_humidity_output
    visual:
      min_temperature: 40
      max_temperature: 65
    control_parameters:
      kp: 0.25000
      ki: 0.00100
      kd: 0.15000
  - platform: pid
    internal: false
    id: pid_climate_fan_cool
    name: "${friendly_name} Climate PID Controller"
    sensor: temperature
    default_target_temperature: 24.5°C
    cool_output: template_temperature_output
    visual:
      min_temperature: 23
      max_temperature: 30
    control_parameters:
      kp: 0.25000
      ki: 0.00100
      kd: 0.15000
  - platform: thermostat
    name: "${friendly_name} Climate Humidity Controller"
    sensor: humidity
    id: climate_humidity
    min_heating_off_time: 30s
    min_heating_run_time: 10s
    min_idle_time: 30s
    visual:
      min_temperature: 40
      max_temperature: 65
    heat_action:
      - switch.turn_on: humiditySwitch
    idle_action:
      - switch.turn_off: humiditySwitch
    default_preset: Home
    heat_overrun: 5
    cool_overrun: 5
    cool_deadband: 5
    heat_deadband: 5
    preset:
      - name: Home
        default_target_temperature_low: 40
    on_control:
      - lambda: |-
          auto call = id(pid_climate_fan_cool_fan_dry).make_call();
          call.set_target_temperature(x.get_target_temperature());
          call.perform();

switch:
  - platform: restart
    id: restart_switch
    name: "${friendly_name} Switch Restart"
  - platform: output
    name: "${friendly_name} Switch Humidity"
    output: humidityOutput
    id: humiditySwitch
    restore_mode: ALWAYS_OFF
  - platform: output
    name: "${friendly_name} Switch USB Fan"
    output: fanUSBOutput
    id: fanUSBSwitch
    restore_mode: ALWAYS_OFF

output:
  - platform: template
    id: template_temperature_output
    type: float
    write_action:
      - lambda: |-
          if (id(template_climate).mode != CLIMATE_MODE_DRY) {
            id(fanoutput).set_level(state);
            id(fan_speed).publish_state(state * 100);
          }
  - platform: template
    id: template_humidity_output
    type: float
    write_action:
      - lambda: |-
          if (id(template_climate).mode == CLIMATE_MODE_DRY) {
            id(fanoutput).set_level(state);
            id(fan_speed).publish_state(state * 100);
          }
  - platform: gpio
    pin: 12
    id: lightOutput
    # inverted: True
  - platform: gpio
    pin: 14
    id: humidityOutput
    # inverted: True
  - platform: gpio
    pin: 27
    id: fanUSBOutput
    # inverted: True
  - platform: ledc
    pin: 26
    id: fanoutput
    frequency: 4000 Hz
    min_power: 0.1
    
fan:
  - platform: speed
    output: fanoutput
    name: "Tent Fan PWM"
    id: fanid
    internal: true

light:
  - platform: binary
    name: "${friendly_name} Light Grow"
    output: lightOutput
    id: growLight
    restore_mode: ALWAYS_OFF

i2c:
  - id: i2cfast
    sda: GPIO33
    scl: GPIO25
    frequency: 800khz
    scan: False
  - id: i2cslow
    sda: GPIO15
    scl: GPIO2
    frequency: 50khz
    scan: False

ads1115:
  - address: 0x48
    i2c_id: i2cfast
    id: ads1115_hub

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 12

time:
  - platform: sntp
    id: sntp_time
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          lambda:
            bool noTemp = !id(temperature).has_state() || !id(humidity).has_state();
            bool noTime = !id(sntp_time).now().is_valid();
            if (noTemp || noTime) {
              id(growLight).turn_off().perform();
              id(template_climate).make_call().set_mode("COOL").perform();
              return;
            }
            if (id(sntp_time).now().hour >= 5 && id(sntp_time).now().hour < 21) {
              ESP_LOGI("main", "on Time %02d:%02d:%02d", id(sntp_time).now().hour, id(sntp_time).now().minute, id(sntp_time).now().second);
              id(growLight).turn_on().perform();
              id(template_climate).make_call().set_mode("COOL").perform();
            } else {
              ESP_LOGI("main", "off Time %02d:%02d:%02d", id(sntp_time).now().hour, id(sntp_time).now().minute, id(sntp_time).now().second);
              id(growLight).turn_off().perform();
              id(template_climate).make_call().set_mode("DRY").perform();
            }

display:
  - platform: ssd1306_i2c
    i2c_id: i2cfast
    model: "SH1106_128x64"
    address: 0x3C
    update_interval: 10s
    lambda: |-
      // Draw the graph at position [x=10,y=20]
      int yPos = 0;
      int fontSize = 12;
      it.printf(2, yPos, id(roboto), "temp : %.1f°C", id(temperature).state);

      yPos = yPos + fontSize;
      it.printf(2, yPos, id(roboto), "humidity : %.1f%%", id(humidity).state);

      yPos = yPos + fontSize;
      if (!id(ads1115_hub).is_failed()) {
        if (id(soil_moisture).state) {
          it.printf(2, yPos, id(roboto), "soil : %.1f%%", id(soil_moisture).state);
        } else {
            it.printf(2, yPos, id(roboto), "soil : no state");
        }
      } else {
        it.printf(2, yPos, id(roboto), "soil : error");
      }

      yPos = yPos + fontSize;
      it.printf(2, yPos, id(roboto), "fan: %.1f%%", id(pid_cool).state);
        

      yPos = yPos + fontSize;
      if (id(growLight).current_values.is_on()) {
        it.printf(2, yPos, id(roboto), "light : on");
      } else {
        it.printf(2, yPos, id(roboto), "light : off");
      }

      yPos = yPos + fontSize;
      switch (id(template_climate).mode) {
        case CLIMATE_MODE_OFF:
          it.printf(2, yPos, id(roboto), "template : off %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_HEAT:
          it.printf(2, yPos, id(roboto), "template : heat %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_HEAT_COOL:
          it.printf(2, yPos, id(roboto), "template : heat + cool %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_COOL:
          it.printf(2, yPos, id(roboto), "template : cool %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_AUTO:
          it.printf(2, yPos, id(roboto), "template : auto %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_DRY:
          it.printf(2, yPos, id(roboto), "template : dry %.0f", id(template_climate).target_temperature);
          break;
        case CLIMATE_MODE_FAN_ONLY:
          it.printf(2, yPos, id(roboto), "template : fan %.0f", id(template_climate).target_temperature);
          break;
        default:
          it.printf(2, yPos, id(roboto), "template : unknown %.0f", id(template_climate).target_temperature);
          break;
      }

      yPos = yPos + fontSize;
      switch (id(pid_climate_fan_cool).mode) {
        case CLIMATE_MODE_OFF:
          it.printf(2, yPos, id(roboto), "climate : off %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_HEAT:
          it.printf(2, yPos, id(roboto), "climate : heat %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_HEAT_COOL:
          it.printf(2, yPos, id(roboto), "climate : heat + cool %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_COOL:
          it.printf(2, yPos, id(roboto), "climate : cool %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_AUTO:
          it.printf(2, yPos, id(roboto), "climate : auto %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_DRY:
          it.printf(2, yPos, id(roboto), "climate : dry %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        case CLIMATE_MODE_FAN_ONLY:
          it.printf(2, yPos, id(roboto), "climate : fan %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
        default:
          it.printf(2, yPos, id(roboto), "climate : unknown %.0f", id(pid_climate_fan_cool).target_temperature);
          break;
      }

      yPos = yPos + fontSize;
      switch (id(pid_climate_fan_cool_fan_dry).mode) {
        case CLIMATE_MODE_OFF:
          it.printf(2, yPos, id(roboto), "humidity : off %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_HEAT:
          it.printf(2, yPos, id(roboto), "humidity : heat %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_HEAT_COOL:
          it.printf(2, yPos, id(roboto), "humidity : heat + cool %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_COOL:
          it.printf(2, yPos, id(roboto), "humidity : cool %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_AUTO:
          it.printf(2, yPos, id(roboto), "humidity : auto %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_DRY:
          it.printf(2, yPos, id(roboto), "humidity : dry %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        case CLIMATE_MODE_FAN_ONLY:
          it.printf(2, yPos, id(roboto), "humidity : fan %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
        default:
          it.printf(2, yPos, id(roboto), "humidity : unknown %.0f", id(pid_climate_fan_cool_fan_dry).target_temperature);
          break;
      }

      yPos = yPos + fontSize;
      it.printf(2, yPos, id(roboto), "uptime : %.fs", id(growbox_uptime).state);

